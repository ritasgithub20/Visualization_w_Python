# Check the measurement, y, and the jacobians for the 1D case with winds OFF (reference case) 
# and winds blowing in the N-S direction, wind_v = 100m/s (the rest of the components are set to zero) 
# (CASE 1) and E-W direction, wind_u = 100m/s (the rest of the components are set to zero) (CASE 2). 
# Compare the difference between ref. spectrum and CASE 1 and difference between ref. spectrum and CASE 2. 

# The cfile_yj has been modified as follows: only calculation of the jacobian for gas 1 (ozone) has been 
# kept (calculation of jacobians for all the other gases, Polyfit and FrequencyShift were not considered). 
# Calculation of jacobians for wind_v and wind_w components was added. 
 
# Are horizontal winds considered at all in the 1D case and if yes, which component is considered? 
# If this works, we will further consider the 1D case instead of the 3D case. 

# Furthermore, if 1D case shows any winds, then calculate the jacobians for each case mentioned above. 
# The jacobians will subsequently tell us if there is a linear correlation or not when checking if the  
# reference case (winds off) is equal to CASE 1 or CASE 2 (depending on which component is considered). 

import pylab
import typhon
import matplotlib as plt 
import numpy as np 
#import matplotlib.gridspec as gridspec 


path1='/Users/ritakajtar/Desktop/work/data_analysis/selected_meas/meas_2017_10_01-07_56_39_march/check_1D/' 


y_f_1D=typhon.arts.xml.load(path1+'cfile_yj_1D_ref_case_nowinds.y_f.xml') 
f_grid=typhon.arts.xml.load(path1+'f_grid.xml')
y_1D_no_winds=typhon.arts.xml.load(path1+'cfile_yj_1D_ref_case_nowinds.y.xml') 
y_1D_wind_u=typhon.arts.xml.load(path1+'cfile_yj_1D_wind_u_100.y.xml') 
y_1D_wind_v=typhon.arts.xml.load(path1+'cfile_yj_1D_wind_v_100.y.xml') 
y_1D_wind_w=typhon.arts.xml.load(path1+'cfile_yj_1D_wind_w_10.y.xml') 
f_backend_1D=typhon.arts.xml.load(path1+'f_backend.xml') 
jacobian_1D_nowinds=typhon.arts.xml.load(path1+'cfile_yj_1D_ref_case_nowinds.jacobian.xml') 
jacobian_1D_wind_u=typhon.arts.xml.load(path1+'cfile_yj_1D_wind_u_100.jacobian.xml') 
jacobian_1D_wind_v=typhon.arts.xml.load(path1+'cfile_yj_1D_wind_v_100.jacobian.xml') 
jacobian_1D_wind_w=typhon.arts.xml.load(path1+'cfile_yj_1D_wind_w_10.jacobian.xml')
jacobian_1D_indices=typhon.arts.xml.load(path1+'cfile_yj_1D_wind_v_100.jacobian_indices.xml') 
p_grid_1D=typhon.arts.xml.load(path1+'p_grid.xml')
p_grid_ozone_1D=typhon.arts.xml.load(path1+'gas1_jac_p_grid.xml') 
z_field_1D=typhon.arts.xml.load(path1+'z_field.xml')

#z_field_ozone_1D=np.interp(np.log(p_grid_ozone_1D), np.log(p_grid_1D)[::-1], z_field_1D[:,0,0][::-1]) 

plt.style.use('seaborn')

plt.pyplot.figure()  

plt.pyplot.subplot(3, 1, 1)   
pylab.plot(y_f_1D*1e-9, y_1D_wind_u-y_1D_no_winds, label='y_1D_wind_u - y_1D_no_winds', 
           color='black') 

pylab.legend(loc=2) 
plt.pyplot.grid(color='black', linestyle='-', linewidth=0.1)
plt.pyplot.title('E-W component not considered in the 1D case')
plt.pyplot.xlabel('Frequency [GHz]')
plt.pyplot.ylabel('\u0394Bt [K]')  

plt.pyplot.subplot(3, 1, 2)   
pylab.plot(y_f_1D*1e-9, y_1D_wind_v-y_1D_no_winds, label='y_1D_wind_v - y_1D_no_winds', 
           color='red') 

pylab.legend(loc=0) 
plt.pyplot.grid(color='black', linestyle='-', linewidth=0.1)
plt.pyplot.title('N-S wind component considered in the 1D case')
plt.pyplot.xlabel('Frequency [GHz]')
plt.pyplot.ylabel('\u0394Bt [K]')  
     
plt.pyplot.subplot(3, 1, 3)    
pylab.plot(y_f_1D*1e-9, y_1D_wind_w-y_1D_no_winds, label='y_1D_wind_w - y_1D_no_winds', 
           color='blue')

pylab.legend(loc=0) 
plt.pyplot.grid(color='black', linestyle='-', linewidth=0.1)
plt.pyplot.title('Vertical wind component considered in the 1D case')
plt.pyplot.xlabel('Frequency [GHz]')
plt.pyplot.ylabel('\u0394Bt [K]')  
     

plt.pyplot.tight_layout()  

plt.pyplot.show() 

############################################################################### 

plt.pyplot.figure()


#plt.pyplot.subplot(1, 3, 1)
value_range=np.abs(np.max(jacobian_1D_nowinds[:,0:200]))
plt.pyplot.contourf(y_f_1D*1e-9, z_field_1D[:,0,0]*1e-3, jacobian_1D_nowinds[:,0:200].T, 300, cmap='RdBu_r', vmax=value_range, vmin=-value_range) 
plt.pyplot.colorbar()
pylab.xlim(231,231.4)
plt.pyplot.xlabel('Frequency [GHz]')
plt.pyplot.ylabel('Altitude [km]')
plt.pyplot.title('Jacobian for ozone \n when no winds are considered')

#plt.pyplot.grid(color='black', linestyle='-', linewidth=0.1) 


plt.pyplot.figure()

#plt.pyplot.subplot(1, 3, 2)
value_range=np.abs(np.max(jacobian_1D_nowinds[:,200:400]))
plt.pyplot.contourf(y_f_1D*1e-9, z_field_1D[:,0,0]*1e-3, jacobian_1D_nowinds[:,200:400].T, 300, cmap='RdBu_r', vmax=value_range, vmin=-value_range)
plt.pyplot.colorbar() 
pylab.xlim(231,231.4)
plt.pyplot.xlabel('Frequency [GHz]')
plt.pyplot.ylabel('Altitude [km]')
plt.pyplot.title('Jacobian for the wind_v component \n when no winds are considered')

#plt.pyplot.grid(color='black', linestyle='-', linewidth=0.1) 


plt.pyplot.figure()

#plt.pyplot.subplot(1, 3, 3)
value_range=np.abs(np.max(jacobian_1D_nowinds[:,400:600]))
plt.pyplot.contourf(y_f_1D*1e-9, z_field_1D[:,0,0]*1e-3, jacobian_1D_nowinds[:,400:600].T, 300, cmap='RdBu_r', vmax=value_range, vmin=-value_range)
plt.pyplot.colorbar() 
pylab.xlim(231,231.4)
plt.pyplot.xlabel('Frequency [GHz]')
plt.pyplot.ylabel('Altitude [km]')
plt.pyplot.title('Jacobian for the wind_w component \n when no winds are considered')

 
#plt.pyplot.tight_layout() 

############################# comparative_plot ################################ 

plt.pyplot.figure()

plt.pyplot.subplot(1, 3, 1)
#value_range=np.abs(np.max(jacobian_1D_nowinds[:,0:200]))
plt.pyplot.contourf(y_f_1D*1e-9, z_field_1D[:,0,0]*1e-3, jacobian_1D_nowinds[:,0:200].T, 300, cmap='RdBu_r', vmax=0.27, vmin=-0.27) 
plt.pyplot.colorbar()
pylab.xlim(231,231.4)
plt.pyplot.xlabel('Frequency [GHz]')
plt.pyplot.ylabel('Altitude [km]')
plt.pyplot.title('Jacobian for ozone \n when no winds are considered') 


plt.pyplot.subplot(1, 3, 2)
#value_range=np.abs(np.max(jacobian_1D_nowinds[:,200:400]))
plt.pyplot.contourf(y_f_1D*1e-9, z_field_1D[:,0,0]*1e-3, jacobian_1D_nowinds[:,200:400].T, 300, cmap='RdBu_r', vmax=0.27, vmin=-0.27)
plt.pyplot.colorbar() 
pylab.xlim(231,231.4)
plt.pyplot.xlabel('Frequency [GHz]')
plt.pyplot.ylabel('Altitude [km]')
plt.pyplot.title('Jacobian for the wind_v component \n when no winds are considered') 


plt.pyplot.subplot(1, 3, 3)
#value_range=np.abs(np.max(jacobian_1D_nowinds[:,400:600]))
plt.pyplot.contourf(y_f_1D*1e-9, z_field_1D[:,0,0]*1e-3, jacobian_1D_nowinds[:,400:600].T, 300, cmap='RdBu_r', vmax=0.27, vmin=-0.27)
plt.pyplot.colorbar() 
pylab.xlim(231,231.4)
plt.pyplot.xlabel('Frequency [GHz]')
plt.pyplot.ylabel('Altitude [km]')
plt.pyplot.title('Jacobian for the wind_w component \n when no winds are considered')


plt.pyplot.tight_layout() 
